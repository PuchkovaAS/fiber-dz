package components

import "fmt"

type ArrowProps struct {
	Active bool
	Page   int  // Текущая страница
	IsNext bool // true для стрелки "вперед", false для "назад"
}

templ ArrowRight(props ArrowProps) {
	@ArrowStyle()
	<div class={ "arrow-container" , templ.KV("arrow-right", props.Active), templ.KV("arrow-inactive", !props.Active) }>
		if props.Active {
			<a href={ fmt.Sprintf("/?page=%d", props.Page+1) } class="arrow-link">
				<svg class="arrow-icon" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
					<path
						d="M9 18L15 12L9 6"
						stroke="currentColor"
						stroke-width="2"
						stroke-linecap="round"
						stroke-linejoin="round"
					></path>
				</svg>
			</a>
		} else {
			<svg class="arrow-icon" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
				<path d="M9 18L15 12L9 6" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"></path>
			</svg>
		}
	</div>
}

templ ArrowLeft(props ArrowProps) {
	@ArrowStyle()
	<div class={ "arrow-container" , templ.KV("arrow-left", props.Active), templ.KV("arrow-inactive", !props.Active) }>
		if props.Active {
			<a href={ fmt.Sprintf("/?page=%d", props.Page-1) } class="arrow-link">
				<svg class="arrow-icon" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
					<path
						d="M15 18L9 12L15 6"
						stroke="currentColor"
						stroke-width="2"
						stroke-linecap="round"
						stroke-linejoin="round"
					></path>
				</svg>
			</a>
		} else {
			<svg class="arrow-icon" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
				<path
					d="M15 18L9 12L15 6"
					stroke="currentColor"
					stroke-width="2"
					stroke-linecap="round"
					stroke-linejoin="round"
				></path>
			</svg>
		}
	</div>
}

templ ArrowStyle() {
	<style>
    .arrow-container {
        width: 32px;
        height: 32px;
        display: flex;
        align-items: center;
        justify-content: center;
        cursor: pointer;
        border-radius: 50%;
        transition: all 0.2s ease;
    }

    .arrow-right {
        background-color: var(--color-black-5);
        opacity: 0.8;
    }

    .arrow-left {
        background-color: var(--color-black-5);
        opacity: 0.8;
    }

    .arrow-inactive {
        background-color: var(--color-gray);
        opacity: 0.5;
        cursor: not-allowed;
    }

    .arrow-icon {
        width: 24px;
        height: 24px;
        color: var(--color-black);
        transition: all 0.2s ease;
    }

    .arrow-link {
        display: flex;
        align-items: center;
        justify-content: center;
        width: 100%;
        height: 100%;
    }

    .arrow-container:hover:not(.arrow-inactive) {
        background-color: var(--color-text-hover);
    }

    .arrow-container:hover:not(.arrow-inactive) .arrow-icon {
        transform: translateX(2px);
        color: var(--color-primary);
    }

    .arrow-right:hover:not(.arrow-inactive) {
        opacity: 1;
    }

    .arrow-left:hover:not(.arrow-inactive) {
        opacity: 1;
    }
</style>
}
